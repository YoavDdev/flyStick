"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import { format, differenceInDays, addDays, isBefore } from "date-fns";
import { he } from "date-fns/locale";
import toast from "react-hot-toast";

type SortableHeaderProps = {
  field: string;
  currentSort: string;
  direction: "asc" | "desc";
  onSort: (field: string) => void;
  children: React.ReactNode;
};

const SortableHeader: React.FC<SortableHeaderProps> = ({ field, currentSort, direction, onSort, children }) => {
  const isSorted = currentSort === field;
  
  return (
    <th 
      className="px-2 sm:px-3 py-2 sm:py-3.5 text-right text-xs sm:text-sm font-semibold text-[#5D5D5D] cursor-pointer hover:text-[#B56B4A]"
      onClick={() => onSort(field)}
    >
      {children}
      {isSorted && (
        <span className="ml-1">
          {direction === "asc" ? "↑" : "↓"}
        </span>
      )}
    </th>
  );
};

type User = {
  id: string;
  name: string | null;
  email: string | null;
  subscriptionId: string | null;
  trialStartDate?: string | null;
  cancellationDate?: string | null;
  emailVerified: string | null;
  image: string | null;
  createdAt: string;
  updatedAt: string;
  paypalStatus?: string | null;
  paypalId?: string | null;
  _count?: {
    watchedVideos: number;
    favorites: number;
    accounts: number;
  };
};

type AdminUserTableProps = {
  users: User[];
  onUpdateUser: (userId: string, updates: Partial<User>) => Promise<void>;
  sortField: keyof User;
  sortDirection: "asc" | "desc";
  onSort: (field: string) => void;
  isUpdating?: boolean;
};

type User = {
  id: string;
  name: string | null;
  email: string | null;
  subscriptionId: string | null;
  trialStartDate?: string | null; // Add trialStartDate field
  cancellationDate?: string | null; // Add cancellationDate field for grace period
  emailVerified: string | null;
  image: string | null;
  createdAt: string;
  updatedAt: string;
  paypalStatus?: string | null;
  paypalId?: string | null;
  _count: {
    watchedVideos: number;
    favorites: number;
    accounts: number;
  };
};

type AdminUserTableProps = {
  users: User[];
  onUpdateUser: (userId: string, updates: Partial<User>) => Promise<void>;
  sortField: keyof User;
  sortDirection: "asc" | "desc";
  onSort: (field: string) => void;
  isUpdating?: boolean;
};

export default function AdminUserTable({
  users,
  onUpdateUser,
  sortField,
  sortDirection,
  onSort,
  isUpdating = false
}: AdminUserTableProps) {
  const [editingUser, setEditingUser] = useState<string | null>(null);
  const [editForm, setEditForm] = useState<{
    name: string;
    email: string;
    subscriptionId: string;
    setCancellationDate: boolean;
  }>({
    name: "",
    email: "",
    subscriptionId: "",
    setCancellationDate: false,
  });

  const handleEditClick = (user: User) => {
    setEditingUser(user.id);
    setEditForm({
      name: user.name || "",
      email: user.email || "",
      subscriptionId: user.subscriptionId || "",
      setCancellationDate: false,
    });
  };

  const handleCancelEdit = () => {
    setEditingUser(null);
  };

  const handleSaveEdit = async (userId: string) => {
    try {
      // Prepare updates object
      const updates: Partial<User> = {
        name: editForm.name,
        email: editForm.email,
        subscriptionId: editForm.subscriptionId,
      };
      
      // If setting to trial_30, add current date as trialStartDate
      if (editForm.subscriptionId === "trial_30") {
        updates.trialStartDate = new Date().toISOString();
      }
      
      // If setting cancellation date for grace period
      if (editForm.setCancellationDate) {
        updates.cancellationDate = new Date().toISOString();
        toast.success("נקבע תאריך ביטול מנוי. המשתמש יוכל להמשיך לצפות בתכנים למשך 30 יום נוספים.");
      }
      
      await onUpdateUser(userId, updates);
      setEditingUser(null);
    } catch (error) {
      console.error("Error saving user:", error);
      toast.error("אירעה שגיאה בשמירת הנתונים");
    }
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return format(date, "dd/MM/yyyy HH:mm", { locale: he });
    } catch (error) {
      return "תאריך לא תקין";
    }
  };
  
  const formatShortDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return format(date, "dd/MM/yyyy", { locale: he });
    } catch (error) {
      return "תאריך לא תקין";
    }
  };
  
  const calculateDaysRemaining = (startDate: string, daysToAdd: number) => {
    try {
      const start = new Date(startDate);
      const endDate = addDays(start, daysToAdd);
      const today = new Date();
      
      if (isBefore(endDate, today)) {
        return { expired: true, days: 0 };
      }
      
      const daysLeft = differenceInDays(endDate, today);
      return { expired: false, days: daysLeft };
    } catch (error) {
      return { expired: true, days: 0 };
    }
  };
  
  const calculateDuration = (startDate: string) => {
    try {
      const start = new Date(startDate);
      const today = new Date();
      return differenceInDays(today, start);
    } catch (error) {
      return 0;
    }
  };

  const getSortIcon = (field: string) => {
    if (field !== sortField) return null;
    
    return sortDirection === "asc" ? (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
      </svg>
    ) : (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
      </svg>
    );
  };

  const getSubscriptionStatusClass = (status: string | null, paypalStatus?: string | null) => {
    if (!status) return "bg-gray-100 text-gray-600";
    if (status === "Admin") return "bg-purple-100 text-purple-800";
    if (status === "active") return "bg-green-100 text-green-800";
    if (status === "free") return "bg-blue-100 text-blue-800";
    if (status === "trial_30") return "bg-indigo-100 text-indigo-800";
    if (status.includes("sub_")) return "bg-blue-100 text-blue-800";
    if (status.startsWith("I-")) {
      if (paypalStatus === "ACTIVE") return "bg-green-100 text-green-800";
      if (paypalStatus === "CANCELLED") return "bg-red-100 text-red-800";
      if (paypalStatus === "SUSPENDED") return "bg-yellow-100 text-yellow-800";
      if (paypalStatus === "EXPIRED") return "bg-gray-100 text-gray-600";
      return "bg-blue-100 text-blue-800";
    }
    return "bg-yellow-100 text-yellow-800";
  };
  
  const getSubscriptionStatusText = (user: User) => {
    const { subscriptionId, paypalStatus, cancellationDate } = user;
    
    // Check if user is in grace period
    let isInGracePeriod = false;
    if (cancellationDate) {
      const gracePeriodEnd = new Date(cancellationDate);
      gracePeriodEnd.setDate(gracePeriodEnd.getDate() + 30); // 30-day grace period
      isInGracePeriod = new Date() < gracePeriodEnd;
    }
    
    if (!subscriptionId) return "ללא מנוי";
    if (subscriptionId === "Admin") return "מנהל";
    if (subscriptionId === "free") return "גישה חופשית";
    if (subscriptionId === "trial_30") return "ניסיון 30 ימים";
    if (subscriptionId === "expired") return "מנוי פג תוקף";
    if (subscriptionId === "active") return "מנוי פעיל";
    
    if (subscriptionId.startsWith("I-")) {
      if (paypalStatus === "ACTIVE") return "תשלום פעיל";
      if (paypalStatus === "CANCELLED") {
        return isInGracePeriod ? "תשלום בוטל (בתקופת גרייס)" : "תשלום בוטל";
      }
      if (paypalStatus === "SUSPENDED") return "תשלום מושהה";
      if (paypalStatus === "EXPIRED") return "תשלום פג תוקף";
      return "תשלום PayPal";
    }

    return subscriptionId;
  };

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-[#F7F3EB]">
        <thead className="bg-[#F7F3EB]">
          <tr>
            <SortableHeader field="name" currentSort={sortField} direction={sortDirection} onSort={onSort}>
              <span className="hidden sm:inline">שם</span>
              <span className="sm:hidden">שם</span>
            </SortableHeader>
            <SortableHeader field="email" currentSort={sortField} direction={sortDirection} onSort={onSort}>
              <span className="hidden sm:inline">אימייל</span>
              <span className="sm:hidden">אימייל</span>
            </SortableHeader>
            <SortableHeader field="subscriptionId" currentSort={sortField} direction={sortDirection} onSort={onSort}>
              <span className="hidden sm:inline">סטטוס מנוי</span>
              <span className="sm:hidden">סטטוס</span>
            </SortableHeader>
            <th className="px-2 sm:px-3 py-2 sm:py-3.5 text-right text-xs sm:text-sm font-semibold text-[#5D5D5D]">
              <span className="hidden sm:inline">PayPal פרטים</span>
              <span className="sm:hidden">PayPal</span>
            </th>
            <th className="px-2 sm:px-3 py-2 sm:py-3.5 text-right text-xs sm:text-sm font-semibold text-[#5D5D5D]">
              <span className="hidden sm:inline">תאריכים וזמנים</span>
              <span className="sm:hidden">תאריכים</span>
            </th>
            <SortableHeader field="_count.watchedVideos" currentSort={sortField} direction={sortDirection} onSort={onSort}>
              <span className="hidden sm:inline">סטטיסטיקה</span>
              <span className="sm:hidden">סטטיסטיקה</span>
            </SortableHeader>
            <th className="px-2 sm:px-3 py-2 sm:py-3.5 text-right text-xs sm:text-sm font-semibold text-[#5D5D5D]">
              <span className="hidden sm:inline">פעולות</span>
              <span className="sm:hidden">פעולות</span>
            </th>
            <th 
              scope="col" 
              className="px-3 py-3.5 text-sm font-semibold text-[#5D5D5D] cursor-pointer hover:text-[#B56B4A]"
              onClick={() => onSort("createdAt")}
            >
              תאריך הרשמה {getSortIcon("createdAt")}
            </th>
            <th 
              scope="col" 
              className="px-3 py-3.5 text-sm font-semibold text-[#5D5D5D]"
            >
              סטטיסטיקה
            </th>
            <th 
              scope="col" 
              className="px-3 py-3.5 text-sm font-semibold text-[#5D5D5D]"
            >
              פעולות
            </th>
          </tr>
        </thead>
        <tbody className="divide-y divide-[#D0C8B0]/20">
          {users.length === 0 ? (
            <tr>
              <td colSpan={6} className="px-3 py-4 text-sm text-center text-[#5D5D5D]">
                לא נמצאו משתמשים
              </td>
            </tr>
          ) : (
            users.map((user) => (
              <motion.tr 
                key={user.id}
                    <div className="space-y-2">
                      <select
                        value={editForm.subscriptionId || ""}
                        onChange={(e) => setEditForm({ ...editForm, subscriptionId: e.target.value })}
                        className="w-full p-1 border border-[#D0C8B0] rounded-md text-right"
                      >
                        <option value="">ללא מנוי</option>
                        <option value="Admin">מנהל</option>
                        <option value="free">גישה חופשית</option>
                        <option value="trial_30">ניסיון 30 ימים</option>
                      </select>
                      
                      {/* Checkbox for setting cancellation date */}
                      <div className="flex items-center gap-2 mt-2">
                        <input
                          type="checkbox"
                          id={`setCancellation-${user.id}`}
                          checked={editForm.setCancellationDate}
                          onChange={(e) => setEditForm({ ...editForm, setCancellationDate: e.target.checked })}
                          className="h-4 w-4 text-[#8E9A7C] focus:ring-[#8E9A7C] border-[#D0C8B0] rounded"
                        />
                        <label htmlFor={`setCancellation-${user.id}`} className="text-xs text-[#5D5D5D]">
                          הגדר תאריך ביטול מנוי (30 יום גרייס)
                        </label>
                      </div>
                    </div>
                  ) : (
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSubscriptionStatusClass(user.subscriptionId, user.paypalStatus)}`}>
                      {getSubscriptionStatusText(user)}
                      {user.subscriptionId?.startsWith("I-") && (
                        <span className="mr-1 text-[10px] opacity-70">{user.subscriptionId}</span>
                      )}
                    </span>
                  )}
                </td>
                <td className="whitespace-nowrap px-3 py-4 text-sm text-[#5D5D5D]">
                  {user.paypalId && user.paypalId.startsWith("I-") ? (
                    <div className="flex flex-col gap-1">
                      <span className="text-xs font-medium">
                        ID: <span className="font-bold">{user.paypalId}</span>
                      </span>
                      {user.paypalStatus && (
                        <span className="text-xs">
                          סטטוס: <span className={`font-medium ${user.paypalStatus === "ACTIVE" ? "text-green-600" : user.paypalStatus === "CANCELLED" ? "text-amber-600" : "text-red-600"}`}>{user.paypalStatus}</span>
                        </span>
                      )}
                      <span className="text-xs">
                        תאריך התחלה: {formatShortDate(user.createdAt)}
                      </span>
                      {user.cancellationDate && (
                        <span className="text-xs text-amber-600">
                          ביטול: {formatShortDate(user.cancellationDate)}
                        </span>
                      )}
                    </div>
                  ) : (
                    <span className="text-xs text-gray-500">לא קיים</span>
                  )}
                </td>
                <td className="whitespace-nowrap px-3 py-4 text-sm text-[#5D5D5D]">
                  <div className="flex flex-col gap-1 text-xs">
                    <div className="flex justify-between items-center">
                      <span className="font-medium">נרשם:</span>
                      <span>{formatShortDate(user.createdAt)}</span>
                    </div>
                    
                    {user.subscriptionId && user.subscriptionId !== "" && (
                      <>
                        {user.subscriptionId === "trial_30" && user.trialStartDate && (
                          <>
                            <div className="flex justify-between items-center mt-1">
                              <span>ניסיון החל:</span>
                              <span>{formatShortDate(user.trialStartDate)}</span>
                            </div>
                            {(() => {
                              const trialStatus = calculateDaysRemaining(user.trialStartDate, 30);
                              return (
                                <div className="flex justify-between items-center">
                                  <span>מצב:</span>
                                  {!trialStatus.expired ? (
                                    <span className="text-green-600 font-medium">
                                      פעיל - {trialStatus.days} ימים נותרו
                                    </span>
                                  ) : (
                                    <span className="text-red-600 font-medium">פג תוקף</span>
                                  )}
                                </div>
                              );
                            })()}
                          </>
                        )}
                        
                        {user.subscriptionId.startsWith("I-") && (
                          <>
                            <div className="flex justify-between items-center mt-1">
                              <span>מנוי פעיל מאז:</span>
                              <span>{formatShortDate(user.createdAt)}</span>
                            </div>
                            <div className="flex justify-between items-center">
                              <span>משך מנוי:</span>
                              <span className="text-green-600 font-medium">
                                {calculateDuration(user.createdAt)} ימים
                              </span>
                            </div>
                          </>
                        )}
                        
                        {user.cancellationDate && (
                          <>
                            <div className="flex justify-between items-center mt-1 text-amber-600">
                              <span>ביטול מנוי:</span>
                              <span>{formatShortDate(user.cancellationDate)}</span>
                            </div>
                            {(() => {
                              const graceStatus = calculateDaysRemaining(user.cancellationDate, 30);
                              return (
                                <div className="flex justify-between items-center">
                                  <span>גישה עד:</span>
                                  {!graceStatus.expired ? (
                                    <span className="text-amber-600 font-medium">
                                      {graceStatus.days} ימים נותרו
                                    </span>
                                  ) : (
                                    <span className="text-red-600 font-medium">הסתיים</span>
                                  )}
                                </div>
                              );
                            })()}
                          </>
                        )}
                      </>
                    )}
                  </div>
                </td>


                <td className="whitespace-nowrap px-3 py-4 text-sm text-[#5D5D5D]">
                  {editingUser === user.id ? (
                    <div className="flex gap-2 justify-end">
                      <button
                        onClick={() => handleSaveEdit(user.id)}
                        disabled={isUpdating}
                        className={`${isUpdating ? 'bg-[#8E9A7C]/50' : 'bg-[#8E9A7C] hover:bg-[#8E9A7C]/80'} text-white px-2 py-1 rounded-md text-xs transition-colors flex items-center gap-1`}
                      >
                        {isUpdating && (
                          <span className="inline-block h-3 w-3 rounded-full border-2 border-white border-t-transparent animate-spin"></span>
                        )}
                        שמור
                      </button>
                      <button
                        onClick={handleCancelEdit}
                        disabled={isUpdating}
                        className={`${isUpdating ? 'bg-[#B56B4A]/5 text-[#B56B4A]/50' : 'bg-[#B56B4A]/10 text-[#B56B4A] hover:bg-[#B56B4A]/20'} px-2 py-1 rounded-md text-xs transition-colors`}
                      >
                        ביטול
                      </button>
                    </div>
                  ) : (
                    <button
                      onClick={() => handleEditClick(user)}
                      disabled={isUpdating}
                      className={`${isUpdating ? 'bg-[#D5C4B7]/30 text-[#5D5D5D]/50 cursor-not-allowed' : 'bg-[#D5C4B7]/50 text-[#5D5D5D] hover:bg-[#D5C4B7] cursor-pointer'} px-2 py-1 rounded-md text-xs transition-colors`}
                    >
                      ערוך
                    </button>
                  )}
                </td>
              </motion.tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
