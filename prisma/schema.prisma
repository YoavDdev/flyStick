// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?   @unique
  subscriptionId      String?
  trialStartDate      DateTime? // Track when trial subscription started
  subscriptionStartDate DateTime? // Track when paid subscription started
  cancellationDate    DateTime? // Track when subscription was cancelled for grace period
  
  // PayPal cached data fields
  paypalStatus      String?   // ACTIVE, CANCELLED, EXPIRED, etc.
  paypalId          String?   // PayPal subscription ID
  paypalCancellationDate DateTime? // When PayPal subscription was cancelled
  paypalLastSyncAt  DateTime? // Last time PayPal data was synced
  
  emailVerified     DateTime?
  image             String?
  favorites         Folder[]  @relation("UserToFolder")
  favoritesIds      String[]  @db.ObjectId
  hashedPassword    String?
  hasSeenWelcomeMessage Boolean  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts       Account[]
  passwordResets PasswordReset[]

  watchedVideos  WatchedVideo[]
  messageReads   MessageRead[]
}

model Folder {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId
  name   String
  urls   String[]
  user   User?    @relation("UserToFolder", fields: [userId], references: [id])
}

model WatchedVideo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  videoUri    String   // e.g. "/videos/123456789"
  progress    Int      @default(0)
  resumeTime  Float?   // ✅ זמן אחרון שנשמר
  createdAt   DateTime @default(now())

  @@unique([userId, videoUri]) // prevent duplicates
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  link        String?  // Optional link for "new video" or other announcements
  linkText    String?  // Text to display for the link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true) // Allow admin to deactivate messages
  
  messageReads MessageRead[]
}

model MessageRead {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  messageId String   @db.ObjectId
  readAt    DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])
  
  @@unique([userId, messageId]) // Prevent duplicate reads
}

model NewsletterSubscriber {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  isActive      Boolean  @default(true) // Allow unsubscribe
  source        String?  // "registration", "footer", "dashboard", etc.
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  unsubscribeToken String? @unique // For unsubscribe links
}

model FolderMetadata {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  folderName   String   @unique // Vimeo folder name as unique identifier
  description  String   @db.String // Using String type for longer text
  level        String?  // Single level (for backwards compatibility)
  levels       String[] // Multiple levels support
  levelHebrew  String
  category     String
  subCategory  String?
  order        Int
  isNew        Boolean  @default(false)
  isVisible    Boolean  @default(true)
  image        String?  // Custom folder image URL
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  key          String   @unique // "technique", "equipment", etc.
  hebrew       String   // "טכניקה", "אביזרים", etc.
  emoji        String?  // Optional emoji for UI
  order        Int      @default(0) // Display order
  isActive     Boolean  @default(true) // For soft delete
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  subcategories Subcategory[]
}

model Subcategory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  key          String   // "basics", "advanced", etc.
  hebrew       String   // "יסודות", "מתקדמים", etc.
  order        Int      @default(0) // Display order within category
  isActive     Boolean  @default(true) // For soft delete
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([categoryId, key]) // Unique subcategory key within each category
}